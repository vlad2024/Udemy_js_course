"use strict";
// ООП
// сейчас мы будем разбираться с одним из стилей ООП - это прототипно ориентированое программирование


let str ="ewfwefwe"; // например у нас есть строка, и это простой тип данных, но как только мы хотим вызвать на
// ней какой-то етод, JS превращает её в объект, проводит изменения, и превращает снова в строку


const soldier = {
    healt: 400,
    armor: 100,
    seyHello: function(){
        console.log("Hello");
    }
};

const john = {
    health: 100
};

// сейчас будет устаревший метод, который уже давно не ипользуется
// john.__proto__  =  soldier; // с помощью этой функции мы установили джона прототипом солдата, и теперь все
// свойства которые находятся в солдата, будут в джона, только у него будет свое свойство health

Object.setPrototypeOf(john, soldier); // а это уже правильный вариант устанавливания прототипа, первым
//параметром устанавливаем объект которому я хочу назначить прототип,а вторым- объект прототип которого устанавливаем
console.log(john.armor);
john.seyHello();

// но обычно мы создаём вот так
const john2 = Object.create(soldier); // звучит так, мы создаем новый объект джон, который будет прототипно
// наследоваться он солдата


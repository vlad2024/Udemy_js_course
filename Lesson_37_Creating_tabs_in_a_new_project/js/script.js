"use strict";

document.addEventListener("DOMContentLoaded", () =>{
    // теперь все эти файлы пришло время перенести в гланый
    const tabs = require("./modules/tabs"),
          modal = require("./modules/modal"),
          timer = require("./modules/timer"),
          cards = require("./modules/cards"),
          calc = require("./modules/calc"),
          forms = require("./modules/forms"),
          slider = require("./modules/slider");

    // теперь нам надо вызвать все эти функции
    tabs();
    modal();
    timer();
    cards();
    calc();
    forms();
    slider(); 

    

});

// API - интерфейс програмного обеспечения, или приложения(Простыми словами это набор данных и возможностей
// которые предоставляют нам какое-то решение)
// Сегодня будем разбирать такую технологию как fach API - современная и крайнеудобная технология которая 
// позволяет общаться с сервером и она построена на промисах


// npm пакеты - это кусочки кода, которые лежат на отдельных серверах и которые мы можем устанавливать себе в
// проект, для того чтобы использовать
// Прежде чем установить какие-то npm пакеты нам нужно системе сказать, что сейчас этот проэкт который открыт в
// редакторе кода, будет содержать npm пакеты, то есть он превращается в npm проект
// Чтобы инициализировать npm проект, открываем терминал(можно в VSСode), ИЛИ КОМАНДНУЮ СТРОКУ ЧЕРЕЗ КОТОРУЮ
// ТЫ ОБРАЩАЕШЬСЯ К ГИТУ(это пизже)
// пишем npm init, дальше устанавливаем имя, версию, описание и тд...
// все, там создался файл package.json, он будет содержать информацию о нашем проэкте, а самое главное, 
// он будет содержать информацию о тех пакетах, которые мы в его поместим
// Сейчас установим npm пакет json server, для установки пакета в терминале прописываем npm i (от слова install),
// потом название пакета, то есть json-server, а дальше идут дополнительные параметры, мы можем его установить
// локально(только в этом проэкте(для этого просто не надо ничего указывать)), а можем глобально(на всем компе, 
// для этого надо указать -g (от слова global) и если устанавливать вообще глобальные пакеты, то команду надо
// всегда начинать из sudo, то есть sudo npm i json-server -g), теперь следующим этам нам надо установить флаг,
// чтобы указать как этот пакет влияет на наш проект(то есть используется ли он при разработке, или при работе,
// нашего проэекта) --save-dev это ключ который говорит что пакет используется при разработке, а если бы хотели
// указать, что пакет используется при работе нашего проекта указали бы ключик --save 
// в итоге получилось (npm i json-server --save-dev)
// там создалась папка node-modules, она много весит и её не нужно загружать на гитхаб, для этого должент быть
// файл gitignore, где будут параметры которые указывают, что с проекта не надо загружать, а также могут воз-
// никнуть трудности с удалением этой папки, для этого есть специальная команда
// И если какой-то чел захочет скачать мой репозиторий с дополнительными пакетами которые должны бить
// он просто потом пропишет в командную строку npm i и оно подгрузит все пакеты которые должны быть, так как 
// в packege.json уже есть инфа которые надо пакеты


//___________
// библиотека это какай-то маленький участок кода, либо целый большой ресурс который решает какую-то проблему,
// Обычными словами библиотека - это готовое решение которые можно использовать
// Только что подключили библиотку axios через CDN то есть по ссылке закинули в index.html, это не совсем
// правльно, но пока можно и так, потом правильнее подключу, то есть через npm(или же npx) скачаю пакеты 
// Axios это очень удобная библиотека, которая позволяет работать с сервером, получать, постить и тд, 
// в неё уже завернуто много дополнительных возможностей которые нам бы приходилось каждый раз прописывать
// в ручную, например мы прописывали проверку, где мы помним что промис не выкидывает ошибку в случае 404 или
// чего-то подобного, а только жесткие показывет ошибки, по типу нет инета, и мы делали проверку на правльное
// отрабатывание, в axios эта проверка уже прописана, то же самое с конвертацией в .json() 

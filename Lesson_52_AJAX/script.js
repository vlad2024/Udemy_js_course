"use strict";

// для того чтобы наша страница, наш фронтенд умел общаться с сервером нам необходимы http запросы, которые мы
// будем отправлять
// Мы можем запрашивать данные, постить данные, и выполнять другие какие-то операции, и для того чтобы всё это
// происходило асинхронно(без перезагрузки страници), нам и нужна технология AJAX


// Сейчас мы будем разбирать самый первый вариант AJAX который реализуется при помощи объекта xml http request
// На данный момент уже не совсем актуален, но все равно встерается 

const inputRub = document.querySelector("#rub"),
      inputUsd = document.querySelector("#usd");

inputRub.addEventListener("input", () => { // еще есть change он очень похож на input и оно возникает когда
    // наш импут выходит из фокуса
    const request = new XMLHttpRequest(); // создали объект

    request.open("GET", "current.json"); // этот метод собирает настройки которые 
    // помогут в будущем сделать запрос, 1первым аргументом принимает метод который используется для запроса 
    // get - чтобы получить какието данные от сервера, post - мы можем постить какие-то данные, например
    // отпрвить данные о регистр, 2второй аргумент это путь к нашему серверу, 3третий аргумент отвечает у нас за 
    // асинхронность(синхронный код у нас идёт по порядку, а асинхронный код выполняется одновременно с другим)
    //  Аджакс запросы по умолчанию являются асинхронным кодом
    // Когда мы с вами отправляем запрос нам нужно сказать, а что именно мы отправляем, какая это информация,
    // в чем она закодирована, делается это для того, чтобы наши трансферные протоколы четко понимали, что
    // они передают и когда они приходят к серверу, сервер точно понимал, что он прнимает в себя это JSONфайл,
    // или это какие-то изображения и тд. Для всего этого есть http заголовки 
    request.setRequestHeader("Content-type", "application/json; charset=utf-8"); // мы используем заголовок
    // для передачи JSON файла
    request.send(); // отправили запрос, этот метод запроса будет отличаться в зависимости от того метода,
    // который мы используем(GET, POST), соответственно метод send может принимать какое-то send(body) - body
    // это те данные которые уходят на сервер они существуют в POST и каких-то других методах(потом разберем)


    // status - это свойство содержит и показывает статус нашего запроса
    // statusText - это текстовое описание ответа от сервера
    // response - получаем ответ от сервера, здесь у нас лежит ответ который задал бекенд разработчик, то что 
    //            мы должны использовать на клиенте (еще есть его аналог responseText)
    // readyState - оно содержит текущее состояние нашего запроса, состояния будут обозначаться циферкой
            //      0 - объект был создан, но метод open() еще не вызывался
            //      1 - когда мытод open() был вызван
            //      2 - когда метод send был вызван
            //      3 - когда мы начинаем получать данные, но они не полные
            //      4 - операция полностью завершена и мы можем полностью работать с данными

    request.addEventListener("readystatechange", ()=>{ // readystatechange - это событие отслеживает статус
        // готовности нашего запроса на данный текущий момент, но его использовать мы будем не часто, ибо
        // можно юзать load - оно проще и срабатывает только один раз, когда запрос полностью готов, и если мы
        // юзанем load мы тогда в if-е убираем readyState, ибо он уже не отслеживается, но оставляем статус
        if(request.readyState === 4 && request.status === 200){ //200 - это успешно завершился
            console.log(request.response);
            const data = JSON.parse(request.response);
            inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2); // toFixed округлили к двум
        }else{ // значениям после точки, и записали результат во второй инпут
            inputUsd.value = "Что-то пошло не так";
        }
    });
});



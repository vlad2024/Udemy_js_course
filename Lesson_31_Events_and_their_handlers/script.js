"use strict";

const btn = document.querySelector("button"),
      overlay = document.querySelector(".overlay");

// btn.onclick = function(){
//     alert("click");
// };

// btn.onclick = function(){ // мы просто взяли и перезаписали первый обработчик события, так делать обработчики галимо,
//     alert("Second click"); // мы просто можем забыть, что уже делали обрабочик для этого события, сделать еще раз,
// }; // тем самым перезаписав его, и сломать всю логику

btn.addEventListener("click", () =>{
    alert("click");
} ); // добавляем обработчик события, первым параметром передаем название нашего события, Вторым - колбек функцию
// как я помню то колбек функция выполняется строго за другуй, данном случаем сначала идет клик а потом срабатывает
// колбек функция и кидает alert


btn.addEventListener("click", () =>{ // так правильнее делать обработчики событий, так как теперь же этот второй
    alert("second click"); // обработчик не заместился, а выполнится сразу после первого 
} );

btn.addEventListener("mouseenter", (event) => { // при наводе мышкой на элемент, иногда нам необходимо получать какие-то
    console.log("Hover"); // данные о элементе с которым мы взаимодействуем, например: что за событие сейчас произошло
    // либо же координаты этого элемента и тд, для этого у нас есть специальный объект который называется event, он
    // может иметь свои свойства, он передается как аргумент в колбек функцию, и всегда должен быть перед другими
    // которые мы хотим передать в неё
    console.log(event); // в консоль покажет, что произошло с элементом, то есть что я навелся на него
    console.log(event.target); // таргет это такое свойство которое показывает элемент на который который я навел,
    //event.target.remove();
}); // то есть покажет что это button его айди, текст вэто эллементе и тд, с помощью этого мы и можем взаимодействовать
// например перекрасить его, поменять класс или (удалить его со страницы event.target.remove())


let i = 0;
const deleteElement = (e) => { // можно еще просто создать функцию, а потом передавать её в обработчик
    console.log(e.carrentTarget);
    console.log(e.type); // еще будет выводится тип зобытия которое произошло
    i++;
    if(i == 1){
        btn.removeEventListener("click", deleteElement); // таким же образом мы можем и удалять обработчики
    }
};

btn.addEventListener("click", deleteElement); // мы её тут не вызываем, мы не ставим круглые скобки, а просто ссылаемся
overlay.addEventListener("click", deleteElement, {once: true}); 
// происходит всплытие событий, это когда обработчик сначала отрабатывает на самом вложеном объекте затем на родителе,
// и так выше и выше. Так же у нас в обработчик события мы можем передавать третий параметр, это объект в котором мы
// можем передать различные опции, в данном случаем мы передали объект, в котором есть свойство once которое значит,
// что наш обработчик сработает только один раз

const link = document.querySelector('a');
link.addEventListener("click", (event) =>{
    event.preventDefault(); // отменили стандартное поведение браузера при клике на ссылку
    console.log(event.target);
});



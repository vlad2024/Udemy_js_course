"use strict";
// JavaScript является объектно ориентированным языком и все сущьности которые в нем есть сводятся к объектам
// Если вдаваться в терминологию программирования, то js будет правильнее называть прототипно ориентированным

// const obj = new Object(); можно еще так объкты создавать, но так уже давно не создают

const options = { // у объектов нет свойства length
    name: "test",   // ключ - значение
    name2: "test2",
    width: 1024,
    height: 1024,
    colors: {//создали объект в объекте мы помним,что объекты могут в себя включать какие-то другие типы данных
        border: "black",
        bg: "red"
    },
    makeTest: function(){ // так же в объекте можно создавать методы
        console.log("Test");
    }
};

options.makeTest(); // запускаем метод обжекта

console.log(options["colors"]["border"]); // иногда нам нужно достучаться до вложенных свойств, и это не
// очень хороший способ это сделать, лучше это сделать через дестуротирацию объекта
const {border, bg} = options.colors; // такая структура и называется деструкторизацией, мы вытащили свойства,
// которые находятся во вложенно объекте, в качестве отдельной переменной 
console.log(bg);


delete options.name; // удалит свойство neme из нашего объекта
console.log(options);

for(let key in options){//эт способ перебора for in есть еще способ пеербора for of, но для объекта он не работает
    if(typeof(options[key]) === "object"){ // точное сравнение, если в нашего объекта свойства тип object то
        for(let i in options[key]){
            console.log(`Свойство ${i} имеет значение: ${options[key][i]}`);
        }
    }
    else {
    console.log(`Свойство ${key} имеет значение: ${options[key]}`); // смотрим options[key] через квадратные
    // скобки потому, что через точку браузер не видит эти свойства
    }
}

console.log(Object.keys(options).length); //метод Object.keys(options) берет наш объект и на его основании
// создает массив, в котором все элементы это ключи нашего объекта, а уже в этом массиве мы можем использовать
// свойство length
